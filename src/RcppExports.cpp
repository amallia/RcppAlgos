// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CombinatoricsRcpp
SEXP CombinatoricsRcpp(SEXP Rv, SEXP Rm, SEXP Rrepetition, SEXP RFreqs, SEXP Rlow, SEXP Rhigh, SEXP f1, SEXP f2, SEXP lim, bool IsComb, SEXP RKeepRes, bool IsFactor, bool IsCount);
RcppExport SEXP _RcppAlgos_CombinatoricsRcpp(SEXP RvSEXP, SEXP RmSEXP, SEXP RrepetitionSEXP, SEXP RFreqsSEXP, SEXP RlowSEXP, SEXP RhighSEXP, SEXP f1SEXP, SEXP f2SEXP, SEXP limSEXP, SEXP IsCombSEXP, SEXP RKeepResSEXP, SEXP IsFactorSEXP, SEXP IsCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rm(RmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rrepetition(RrepetitionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RFreqs(RFreqsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rlow(RlowSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rhigh(RhighSEXP);
    Rcpp::traits::input_parameter< SEXP >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type f2(f2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type lim(limSEXP);
    Rcpp::traits::input_parameter< bool >::type IsComb(IsCombSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RKeepRes(RKeepResSEXP);
    Rcpp::traits::input_parameter< bool >::type IsFactor(IsFactorSEXP);
    Rcpp::traits::input_parameter< bool >::type IsCount(IsCountSEXP);
    rcpp_result_gen = Rcpp::wrap(CombinatoricsRcpp(Rv, Rm, Rrepetition, RFreqs, Rlow, Rhigh, f1, f2, lim, IsComb, RKeepRes, IsFactor, IsCount));
    return rcpp_result_gen;
END_RCPP
}
// DivisorsGeneral
SEXP DivisorsGeneral(SEXP Rb1, SEXP Rb2, SEXP RIsList, SEXP RNamed);
RcppExport SEXP _RcppAlgos_DivisorsGeneral(SEXP Rb1SEXP, SEXP Rb2SEXP, SEXP RIsListSEXP, SEXP RNamedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rb1(Rb1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rb2(Rb2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type RIsList(RIsListSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RNamed(RNamedSEXP);
    rcpp_result_gen = Rcpp::wrap(DivisorsGeneral(Rb1, Rb2, RIsList, RNamed));
    return rcpp_result_gen;
END_RCPP
}
// getAllDivisorsRcpp
SEXP getAllDivisorsRcpp(SEXP Rv, SEXP RNamed);
RcppExport SEXP _RcppAlgos_getAllDivisorsRcpp(SEXP RvSEXP, SEXP RNamedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RNamed(RNamedSEXP);
    rcpp_result_gen = Rcpp::wrap(getAllDivisorsRcpp(Rv, RNamed));
    return rcpp_result_gen;
END_RCPP
}
// PrimeFactorsContainer
SEXP PrimeFactorsContainer(SEXP Rv, SEXP RNamed);
RcppExport SEXP _RcppAlgos_PrimeFactorsContainer(SEXP RvSEXP, SEXP RNamedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RNamed(RNamedSEXP);
    rcpp_result_gen = Rcpp::wrap(PrimeFactorsContainer(Rv, RNamed));
    return rcpp_result_gen;
END_RCPP
}
// IsPrimeContainer
SEXP IsPrimeContainer(SEXP Rv, SEXP RNamed);
RcppExport SEXP _RcppAlgos_IsPrimeContainer(SEXP RvSEXP, SEXP RNamedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RNamed(RNamedSEXP);
    rcpp_result_gen = Rcpp::wrap(IsPrimeContainer(Rv, RNamed));
    return rcpp_result_gen;
END_RCPP
}
// MasterPrimeCount
SEXP MasterPrimeCount(SEXP Rn);
RcppExport SEXP _RcppAlgos_MasterPrimeCount(SEXP RnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rn(RnSEXP);
    rcpp_result_gen = Rcpp::wrap(MasterPrimeCount(Rn));
    return rcpp_result_gen;
END_RCPP
}
// EratosthenesRcpp
SEXP EratosthenesRcpp(SEXP Rb1, SEXP Rb2, SEXP RIsList, SEXP RIsEuler, SEXP RNamed);
RcppExport SEXP _RcppAlgos_EratosthenesRcpp(SEXP Rb1SEXP, SEXP Rb2SEXP, SEXP RIsListSEXP, SEXP RIsEulerSEXP, SEXP RNamedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rb1(Rb1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rb2(Rb2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type RIsList(RIsListSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RIsEuler(RIsEulerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RNamed(RNamedSEXP);
    rcpp_result_gen = Rcpp::wrap(EratosthenesRcpp(Rb1, Rb2, RIsList, RIsEuler, RNamed));
    return rcpp_result_gen;
END_RCPP
}
// SampleRcpp
SEXP SampleRcpp(SEXP Rv, SEXP Rm, SEXP Rrepetition, SEXP RFreqs, SEXP Rsample, bool IsComb, bool IsFactor, double computedRows);
RcppExport SEXP _RcppAlgos_SampleRcpp(SEXP RvSEXP, SEXP RmSEXP, SEXP RrepetitionSEXP, SEXP RFreqsSEXP, SEXP RsampleSEXP, SEXP IsCombSEXP, SEXP IsFactorSEXP, SEXP computedRowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rv(RvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rm(RmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rrepetition(RrepetitionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RFreqs(RFreqsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rsample(RsampleSEXP);
    Rcpp::traits::input_parameter< bool >::type IsComb(IsCombSEXP);
    Rcpp::traits::input_parameter< bool >::type IsFactor(IsFactorSEXP);
    Rcpp::traits::input_parameter< double >::type computedRows(computedRowsSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleRcpp(Rv, Rm, Rrepetition, RFreqs, Rsample, IsComb, IsFactor, computedRows));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppAlgos_CombinatoricsRcpp", (DL_FUNC) &_RcppAlgos_CombinatoricsRcpp, 13},
    {"_RcppAlgos_DivisorsGeneral", (DL_FUNC) &_RcppAlgos_DivisorsGeneral, 4},
    {"_RcppAlgos_getAllDivisorsRcpp", (DL_FUNC) &_RcppAlgos_getAllDivisorsRcpp, 2},
    {"_RcppAlgos_PrimeFactorsContainer", (DL_FUNC) &_RcppAlgos_PrimeFactorsContainer, 2},
    {"_RcppAlgos_IsPrimeContainer", (DL_FUNC) &_RcppAlgos_IsPrimeContainer, 2},
    {"_RcppAlgos_MasterPrimeCount", (DL_FUNC) &_RcppAlgos_MasterPrimeCount, 1},
    {"_RcppAlgos_EratosthenesRcpp", (DL_FUNC) &_RcppAlgos_EratosthenesRcpp, 5},
    {"_RcppAlgos_SampleRcpp", (DL_FUNC) &_RcppAlgos_SampleRcpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppAlgos(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
